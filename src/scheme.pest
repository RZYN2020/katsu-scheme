// Programs and definitions
prog = {
    SOI ~ (def | exp)* ~ EOI
}

def = {
    "(" ~ "define" ~ identifier ~ exp ~ ")"
}

// Expressions

exp = {
    identifier
  | literal
  | lambda
  | cond
  | derived
  | call
}

literal = {
    quotation
  | self_evaluating
}

self_evaluating = {
    boolean
  | number
  | string
}

quotation = {
    "'" ~ datum
  | "(" ~ "quote" ~ datum ~ ")"
}

call     = {
    "(" ~ operator ~ operand* ~ ")"
}
operator = { exp }
operand  = { exp }

lambda  = {
    "(" ~ "lambda" ~ "(" ~ formals ~ ")" ~ definitions ~ exp ~ ")"
}
formals = { identifier | "(" ~ identifier* ~ ")" }
definitions = { def* }

cond       = {
    "(" ~ "if" ~ test ~ consequent ~ alternate ~ ")"
}
test       = { exp }
consequent = { exp }
alternate  = { exp | "" }

derived     = {
    no_else_cond
  | else_cond
  | and
  | or
  | let_exp
}
no_else_cond = {
  "(" ~ "cond" ~ cond_clause* ~ ")"
}
else_cond = {
  "(" ~ "cond" ~ cond_clause+ ~ "(" ~ "else" ~ exp ~ ")" ~ ")"
}
and = {
  "(" ~ "and" ~ test* ~ ")"
}
or = {
  "(" ~ "or" ~ test* ~ ")"
}
let_exp = {
  "(" ~ "let" ~ "(" ~ binding* ~ ")" ~ exp ~ ")"
}

cond_clause = {
    "(" ~ test ~ exp ~ ")"
}
binding = { "(" ~ identifier ~ exp ~ ")" }


// External representations (Datum)
datum          = {
    simple_datum
  | compound_datum
}
simple_datum   = {
    boolean
  | number
  | string
  | symbol
}
symbol         = { identifier }

compound_datum = {
    list
  | abbr
}
list = {
    pure_list
  | list_pair
}
pure_list = {
    "(" ~ datum* ~ ")"
}
list_pair = {
  "(" ~ datum+ ~ "." ~ datum ~ ")"
}

abbr           = {
    "'" ~ datum
}

// Identifier
identifier = @{ initial ~ subsequent* | peculiar }

initial = @{ ASCII_ALPHA | "!" | "$" | "%" | "&" | "*" | "/" | ":" | "<" | "=" | ">" | "?" | "^" | "_" | "~" }

subsequent = @{ initial | ASCII_DIGIT | explicit_sign | "." }

explicit_sign = @{ "+" | "-" }

peculiar = @{
    explicit_sign
  | explicit_sign ~ sign_subsequent ~ subsequent*
  | explicit_sign ~ "." ~ dot_subsequent ~ subsequent*
}

dot_subsequent = @{ sign_subsequent | "." }

sign_subsequent = @{ initial | explicit_sign }

// Literals
boolean =  { "#t" | "#f" }
number  = @{ sign ~ ASCII_DIGIT+ }
sign    =  { "+" | "-" | "" }
string  = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

// Whitespace
WHITESPACE     = _{ " " | "\t" | LINE_SEPARATOR }
COMMENT        = _{ ";" ~ (!LINE_SEPARATOR ~ ANY)* ~ LINE_SEPARATOR }
LINE_SEPARATOR = _{ "\n" | "\r" | "\r\n" }
